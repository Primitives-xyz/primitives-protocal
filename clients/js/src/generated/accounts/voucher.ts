/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@metaplex-foundation/umi';
import { LeafSchema, LeafSchemaArgs, getLeafSchemaSerializer } from '../types';

export type Voucher = Account<VoucherAccountData>;

export type VoucherAccountData = {
  discriminator: Array<number>;
  leafSchema: LeafSchema;
  index: number;
  merkleTree: PublicKey;
};

export type VoucherAccountDataArgs = {
  leafSchema: LeafSchemaArgs;
  index: number;
  merkleTree: PublicKey;
};

export function getVoucherAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<VoucherAccountDataArgs, VoucherAccountData> {
  const s = context.serializer;
  return mapSerializer<VoucherAccountDataArgs, any, VoucherAccountData>(
    s.struct<VoucherAccountData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['leafSchema', getLeafSchemaSerializer(context)],
        ['index', s.u32()],
        ['merkleTree', s.publicKey()],
      ],
      { description: 'VoucherAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [191, 204, 149, 234, 213, 165, 13, 65],
    })
  ) as Serializer<VoucherAccountDataArgs, VoucherAccountData>;
}

export function deserializeVoucher(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Voucher {
  return deserializeAccount(
    rawAccount,
    getVoucherAccountDataSerializer(context)
  );
}

export async function fetchVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Voucher> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  assertAccountExists(maybeAccount, 'Voucher');
  return deserializeVoucher(context, maybeAccount);
}

export async function safeFetchVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
  options?: RpcGetAccountOptions
): Promise<Voucher | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey, options);
  return maybeAccount.exists ? deserializeVoucher(context, maybeAccount) : null;
}

export async function fetchAllVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Voucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Voucher');
    return deserializeVoucher(context, maybeAccount);
  });
}

export async function safeFetchAllVoucher(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKeys: PublicKey[],
  options?: RpcGetAccountsOptions
): Promise<Voucher[]> {
  const maybeAccounts = await context.rpc.getAccounts(publicKeys, options);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeVoucher(context, maybeAccount as RpcAccount)
    );
}

export function getVoucherGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>
) {
  const s = context.serializer;
  const programId = context.programs.getPublicKey(
    'bubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      leafSchema: LeafSchemaArgs;
      index: number;
      merkleTree: PublicKey;
    }>({
      discriminator: [0, s.array(s.u8(), { size: 8 })],
      leafSchema: [8, getLeafSchemaSerializer(context)],
      index: [177, s.u32()],
      merkleTree: [181, s.publicKey()],
    })
    .deserializeUsing<Voucher>((account) =>
      deserializeVoucher(context, account)
    )
    .whereField('discriminator', [191, 204, 149, 234, 213, 165, 13, 65]);
}

export function getVoucherSize(): number {
  return 213;
}
