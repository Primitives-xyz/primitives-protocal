/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';
import {
  MetadataArgs,
  MetadataArgsArgs,
  getMetadataArgsSerializer,
} from '../types';

// Accounts.
export type DecompressV1InstructionAccounts = {
  voucher: PublicKey;
  leafOwner: Signer;
  tokenAccount: PublicKey;
  mint: PublicKey;
  mintAuthority: PublicKey;
  metadata: PublicKey;
  masterEdition: PublicKey;
  systemProgram?: PublicKey;
  sysvarRent?: PublicKey;
  tokenMetadataProgram?: PublicKey;
  tokenProgram?: PublicKey;
  associatedTokenProgram: PublicKey;
  logWrapper?: PublicKey;
};

// Data.
export type DecompressV1InstructionData = {
  discriminator: Array<number>;
  message: MetadataArgs;
};

export type DecompressV1InstructionDataArgs = { message: MetadataArgsArgs };

export function getDecompressV1InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<DecompressV1InstructionDataArgs, DecompressV1InstructionData> {
  const s = context.serializer;
  return mapSerializer<
    DecompressV1InstructionDataArgs,
    any,
    DecompressV1InstructionData
  >(
    s.struct<DecompressV1InstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['message', getMetadataArgsSerializer(context)],
      ],
      { description: 'DecompressV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [54, 85, 76, 70, 228, 250, 164, 81],
    })
  ) as Serializer<DecompressV1InstructionDataArgs, DecompressV1InstructionData>;
}

// Args.
export type DecompressV1InstructionArgs = DecompressV1InstructionDataArgs;

// Instruction.
export function decompressV1(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: DecompressV1InstructionAccounts & DecompressV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplBubblegum',
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'sysvarRent',
    input.sysvarRent ?? publicKey('SysvarRent111111111111111111111111111111111')
  );
  addObjectProperty(
    resolvingAccounts,
    'tokenMetadataProgram',
    input.tokenMetadataProgram ?? {
      ...context.programs.getPublicKey(
        'mplTokenMetadata',
        'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'tokenProgram',
    input.tokenProgram ?? {
      ...context.programs.getPublicKey(
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'logWrapper',
    input.logWrapper ?? {
      ...context.programs.getPublicKey(
        'splNoop',
        'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Voucher.
  keys.push({
    pubkey: resolvedAccounts.voucher,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.voucher, true),
  });

  // Leaf Owner.
  signers.push(resolvedAccounts.leafOwner);
  keys.push({
    pubkey: resolvedAccounts.leafOwner.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.leafOwner, true),
  });

  // Token Account.
  keys.push({
    pubkey: resolvedAccounts.tokenAccount,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenAccount, true),
  });

  // Mint.
  keys.push({
    pubkey: resolvedAccounts.mint,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.mint, true),
  });

  // Mint Authority.
  keys.push({
    pubkey: resolvedAccounts.mintAuthority,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.mintAuthority, true),
  });

  // Metadata.
  keys.push({
    pubkey: resolvedAccounts.metadata,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.metadata, true),
  });

  // Master Edition.
  keys.push({
    pubkey: resolvedAccounts.masterEdition,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.masterEdition, true),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Sysvar Rent.
  keys.push({
    pubkey: resolvedAccounts.sysvarRent,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.sysvarRent, false),
  });

  // Token Metadata Program.
  keys.push({
    pubkey: resolvedAccounts.tokenMetadataProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenMetadataProgram, false),
  });

  // Token Program.
  keys.push({
    pubkey: resolvedAccounts.tokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.tokenProgram, false),
  });

  // Associated Token Program.
  keys.push({
    pubkey: resolvedAccounts.associatedTokenProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.associatedTokenProgram, false),
  });

  // Log Wrapper.
  keys.push({
    pubkey: resolvedAccounts.logWrapper,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.logWrapper, false),
  });

  // Data.
  const data =
    getDecompressV1InstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
