/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  DecompressableState,
  DecompressableStateArgs,
  getDecompressableStateSerializer,
} from '../types';

// Accounts.
export type SetDecompressableStateInstructionAccounts = {
  treeConfig: PublicKey | Pda;
  treeCreator?: Signer;
};

// Data.
export type SetDecompressableStateInstructionData = {
  discriminator: Array<number>;
  decompressableState: DecompressableState;
};

export type SetDecompressableStateInstructionDataArgs = {
  decompressableState: DecompressableStateArgs;
};

/** @deprecated Use `getSetDecompressableStateInstructionDataSerializer()` without any argument instead. */
export function getSetDecompressableStateInstructionDataSerializer(
  _context: object
): Serializer<
  SetDecompressableStateInstructionDataArgs,
  SetDecompressableStateInstructionData
>;
export function getSetDecompressableStateInstructionDataSerializer(): Serializer<
  SetDecompressableStateInstructionDataArgs,
  SetDecompressableStateInstructionData
>;
export function getSetDecompressableStateInstructionDataSerializer(
  _context: object = {}
): Serializer<
  SetDecompressableStateInstructionDataArgs,
  SetDecompressableStateInstructionData
> {
  return mapSerializer<
    SetDecompressableStateInstructionDataArgs,
    any,
    SetDecompressableStateInstructionData
  >(
    struct<SetDecompressableStateInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['decompressableState', getDecompressableStateSerializer()],
      ],
      { description: 'SetDecompressableStateInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [18, 135, 238, 168, 246, 195, 61, 115],
    })
  ) as Serializer<
    SetDecompressableStateInstructionDataArgs,
    SetDecompressableStateInstructionData
  >;
}

// Args.
export type SetDecompressableStateInstructionArgs =
  SetDecompressableStateInstructionDataArgs;

// Instruction.
export function setDecompressableState(
  context: Pick<Context, 'programs' | 'identity'>,
  input: SetDecompressableStateInstructionAccounts &
    SetDecompressableStateInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    treeConfig: [input.treeConfig, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'treeCreator',
    input.treeCreator
      ? ([input.treeCreator, false] as const)
      : ([context.identity, false] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.treeConfig, false);
  addAccountMeta(keys, signers, resolvedAccounts.treeCreator, false);

  // Data.
  const data =
    getSetDecompressableStateInstructionDataSerializer().serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
