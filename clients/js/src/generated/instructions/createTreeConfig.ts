/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ACCOUNT_HEADER_SIZE,
  AccountMeta,
  Context,
  Option,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  none,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { findTreeConfigPda, getTreeConfigSize } from '../accounts';
import { addObjectProperty, isWritable } from '../shared';

// Accounts.
export type CreateTreeConfigInstructionAccounts = {
  treeAuthority?: PublicKey;
  merkleTree: PublicKey;
  payer?: Signer;
  treeCreator?: Signer;
  logWrapper?: PublicKey;
  compressionProgram?: PublicKey;
  systemProgram?: PublicKey;
};

// Data.
export type CreateTreeConfigInstructionData = {
  discriminator: Array<number>;
  maxDepth: number;
  maxBufferSize: number;
  public: Option<boolean>;
};

export type CreateTreeConfigInstructionDataArgs = {
  maxDepth: number;
  maxBufferSize: number;
  public?: Option<boolean>;
};

export function getCreateTreeConfigInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  CreateTreeConfigInstructionDataArgs,
  CreateTreeConfigInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    CreateTreeConfigInstructionDataArgs,
    any,
    CreateTreeConfigInstructionData
  >(
    s.struct<CreateTreeConfigInstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['maxDepth', s.u32()],
        ['maxBufferSize', s.u32()],
        ['public', s.option(s.bool())],
      ],
      { description: 'CreateTreeConfigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [165, 83, 136, 142, 89, 202, 47, 220],
      public: value.public ?? none(),
    })
  ) as Serializer<
    CreateTreeConfigInstructionDataArgs,
    CreateTreeConfigInstructionData
  >;
}

// Args.
export type CreateTreeConfigInstructionArgs =
  CreateTreeConfigInstructionDataArgs;

// Instruction.
export function createTreeConfig(
  context: Pick<
    Context,
    'serializer' | 'programs' | 'eddsa' | 'identity' | 'payer'
  >,
  input: CreateTreeConfigInstructionAccounts & CreateTreeConfigInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplBubblegum',
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(
    resolvingAccounts,
    'treeAuthority',
    input.treeAuthority ??
      findTreeConfigPda(context, { merkleTree: publicKey(input.merkleTree) })
  );
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'treeCreator',
    input.treeCreator ?? context.identity
  );
  addObjectProperty(
    resolvingAccounts,
    'logWrapper',
    input.logWrapper ?? {
      ...context.programs.getPublicKey(
        'splNoop',
        'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'compressionProgram',
    input.compressionProgram ?? {
      ...context.programs.getPublicKey(
        'splAccountCompression',
        'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
      ),
      isWritable: false,
    }
  );
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Tree Authority.
  keys.push({
    pubkey: resolvedAccounts.treeAuthority,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.treeAuthority, true),
  });

  // Merkle Tree.
  keys.push({
    pubkey: resolvedAccounts.merkleTree,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.merkleTree, true),
  });

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, true),
  });

  // Tree Creator.
  signers.push(resolvedAccounts.treeCreator);
  keys.push({
    pubkey: resolvedAccounts.treeCreator.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.treeCreator, false),
  });

  // Log Wrapper.
  keys.push({
    pubkey: resolvedAccounts.logWrapper,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.logWrapper, false),
  });

  // Compression Program.
  keys.push({
    pubkey: resolvedAccounts.compressionProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.compressionProgram, false),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Data.
  const data =
    getCreateTreeConfigInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = getTreeConfigSize() + ACCOUNT_HEADER_SIZE;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
