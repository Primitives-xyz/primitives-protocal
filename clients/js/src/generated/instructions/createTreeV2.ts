/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  option,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findTreeConfigPda } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';
import {
  DecompressionPermission,
  DecompressionPermissionArgs,
  getDecompressionPermissionSerializer,
} from '../types';

// Accounts.
export type CreateTreeV2InstructionAccounts = {
  treeConfig?: PublicKey | Pda;
  merkleTree: PublicKey | Pda;
  payer?: Signer;
  treeCreator?: Signer;
  logWrapper?: PublicKey | Pda;
  compressionProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateTreeV2InstructionData = {
  discriminator: Array<number>;
  maxDepth: number;
  maxBufferSize: number;
  public: Option<boolean>;
  decompression: DecompressionPermission;
};

export type CreateTreeV2InstructionDataArgs = {
  maxDepth: number;
  maxBufferSize: number;
  public: OptionOrNullable<boolean>;
  decompression: DecompressionPermissionArgs;
};

/** @deprecated Use `getCreateTreeV2InstructionDataSerializer()` without any argument instead. */
export function getCreateTreeV2InstructionDataSerializer(
  _context: object
): Serializer<CreateTreeV2InstructionDataArgs, CreateTreeV2InstructionData>;
export function getCreateTreeV2InstructionDataSerializer(): Serializer<
  CreateTreeV2InstructionDataArgs,
  CreateTreeV2InstructionData
>;
export function getCreateTreeV2InstructionDataSerializer(
  _context: object = {}
): Serializer<CreateTreeV2InstructionDataArgs, CreateTreeV2InstructionData> {
  return mapSerializer<
    CreateTreeV2InstructionDataArgs,
    any,
    CreateTreeV2InstructionData
  >(
    struct<CreateTreeV2InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['maxDepth', u32()],
        ['maxBufferSize', u32()],
        ['public', option(bool())],
        ['decompression', getDecompressionPermissionSerializer()],
      ],
      { description: 'CreateTreeV2InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [55, 99, 95, 215, 142, 203, 227, 205],
    })
  ) as Serializer<CreateTreeV2InstructionDataArgs, CreateTreeV2InstructionData>;
}

// Args.
export type CreateTreeV2InstructionArgs = CreateTreeV2InstructionDataArgs;

// Instruction.
export function createTreeV2(
  context: Pick<Context, 'programs' | 'eddsa' | 'identity' | 'payer'>,
  input: CreateTreeV2InstructionAccounts & CreateTreeV2InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    merkleTree: [input.merkleTree, true] as const,
  };
  const resolvingArgs = {};
  addObjectProperty(
    resolvedAccounts,
    'treeConfig',
    input.treeConfig
      ? ([input.treeConfig, true] as const)
      : ([
          findTreeConfigPda(context, {
            merkleTree: publicKey(input.merkleTree, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'payer',
    input.payer
      ? ([input.payer, true] as const)
      : ([context.payer, true] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'treeCreator',
    input.treeCreator
      ? ([input.treeCreator, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'logWrapper',
    input.logWrapper
      ? ([input.logWrapper, false] as const)
      : ([
          context.programs.getPublicKey(
            'splNoop',
            'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'compressionProgram',
    input.compressionProgram
      ? ([input.compressionProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splAccountCompression',
            'cmtDvXumGCrqC1Age74AVPhSRVXJMd8PJS91L8KbNCK'
          ),
          false,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );
  const resolvedArgs = { ...input, ...resolvingArgs };

  addAccountMeta(keys, signers, resolvedAccounts.treeConfig, false);
  addAccountMeta(keys, signers, resolvedAccounts.merkleTree, false);
  addAccountMeta(keys, signers, resolvedAccounts.payer, false);
  addAccountMeta(keys, signers, resolvedAccounts.treeCreator, false);
  addAccountMeta(keys, signers, resolvedAccounts.logWrapper, false);
  addAccountMeta(keys, signers, resolvedAccounts.compressionProgram, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data =
    getCreateTreeV2InstructionDataSerializer().serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
