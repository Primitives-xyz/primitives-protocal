/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { addObjectProperty, isWritable } from '../shared';
import {
  MetadataArgs,
  MetadataArgsArgs,
  getMetadataArgsSerializer,
} from '../types';

// Accounts.
export type MintV1InstructionAccounts = {
  treeAuthority: PublicKey;
  leafOwner: PublicKey;
  leafDelegate: PublicKey;
  merkleTree: PublicKey;
  payer?: Signer;
  treeDelegate: Signer;
  logWrapper: PublicKey;
  compressionProgram: PublicKey;
  systemProgram?: PublicKey;
};

// Data.
export type MintV1InstructionData = {
  discriminator: Array<number>;
  message: MetadataArgs;
};

export type MintV1InstructionDataArgs = { message: MetadataArgsArgs };

export function getMintV1InstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MintV1InstructionDataArgs, MintV1InstructionData> {
  const s = context.serializer;
  return mapSerializer<MintV1InstructionDataArgs, any, MintV1InstructionData>(
    s.struct<MintV1InstructionData>(
      [
        ['discriminator', s.array(s.u8(), { size: 8 })],
        ['message', getMetadataArgsSerializer(context)],
      ],
      { description: 'MintV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [145, 98, 192, 118, 184, 147, 118, 104],
    })
  ) as Serializer<MintV1InstructionDataArgs, MintV1InstructionData>;
}

// Args.
export type MintV1InstructionArgs = MintV1InstructionDataArgs;

// Instruction.
export function mintV1(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: MintV1InstructionAccounts & MintV1InstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'mplBubblegum',
      'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingAccounts = {};
  const resolvingArgs = {};
  addObjectProperty(resolvingAccounts, 'payer', input.payer ?? context.payer);
  addObjectProperty(
    resolvingAccounts,
    'systemProgram',
    input.systemProgram ?? {
      ...context.programs.getPublicKey(
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isWritable: false,
    }
  );
  const resolvedAccounts = { ...input, ...resolvingAccounts };
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Tree Authority.
  keys.push({
    pubkey: resolvedAccounts.treeAuthority,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.treeAuthority, true),
  });

  // Leaf Owner.
  keys.push({
    pubkey: resolvedAccounts.leafOwner,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.leafOwner, false),
  });

  // Leaf Delegate.
  keys.push({
    pubkey: resolvedAccounts.leafDelegate,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.leafDelegate, false),
  });

  // Merkle Tree.
  keys.push({
    pubkey: resolvedAccounts.merkleTree,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.merkleTree, true),
  });

  // Payer.
  signers.push(resolvedAccounts.payer);
  keys.push({
    pubkey: resolvedAccounts.payer.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.payer, false),
  });

  // Tree Delegate.
  signers.push(resolvedAccounts.treeDelegate);
  keys.push({
    pubkey: resolvedAccounts.treeDelegate.publicKey,
    isSigner: true,
    isWritable: isWritable(resolvedAccounts.treeDelegate, false),
  });

  // Log Wrapper.
  keys.push({
    pubkey: resolvedAccounts.logWrapper,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.logWrapper, false),
  });

  // Compression Program.
  keys.push({
    pubkey: resolvedAccounts.compressionProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.compressionProgram, false),
  });

  // System Program.
  keys.push({
    pubkey: resolvedAccounts.systemProgram,
    isSigner: false,
    isWritable: isWritable(resolvedAccounts.systemProgram, false),
  });

  // Data.
  const data =
    getMintV1InstructionDataSerializer(context).serialize(resolvedArgs);

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
