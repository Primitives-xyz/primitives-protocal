/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Serializer,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';

// Data.
export type NoopInstructionInstructionData = { data: Uint8Array };

export type NoopInstructionInstructionDataArgs = NoopInstructionInstructionData;

export function getNoopInstructionInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  NoopInstructionInstructionDataArgs,
  NoopInstructionInstructionData
> {
  const s = context.serializer;
  return s.struct<NoopInstructionInstructionData>([['data', s.bytes()]], {
    description: 'NoopInstructionInstructionData',
  }) as Serializer<
    NoopInstructionInstructionDataArgs,
    NoopInstructionInstructionData
  >;
}

// Args.
export type NoopInstructionInstructionArgs = NoopInstructionInstructionDataArgs;

// Instruction.
export function noopInstruction(
  context: Pick<Context, 'serializer' | 'programs'>,
  input: NoopInstructionInstructionArgs
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = {
    ...context.programs.getPublicKey(
      'splNoop',
      'noopb9bkMVfRPU8AsbpTUg8AQkHtKwMYZiFUjNRtMmV'
    ),
    isWritable: false,
  };

  // Resolved inputs.
  const resolvingArgs = {};
  const resolvedArgs = { ...input, ...resolvingArgs };

  // Data.
  const data =
    getNoopInstructionInstructionDataSerializer(context).serialize(
      resolvedArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
