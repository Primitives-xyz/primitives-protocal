/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  mapSerializer,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import { findTreeConfigPda } from '../accounts';
import { addAccountMeta, addObjectProperty } from '../shared';

// Accounts.
export type SetTreeDelegateInstructionAccounts = {
  treeAuthority?: PublicKey | Pda;
  treeCreator?: Signer;
  newTreeDelegate: PublicKey | Pda;
  merkleTree: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type SetTreeDelegateInstructionData = { discriminator: Array<number> };

export type SetTreeDelegateInstructionDataArgs = {};

export function getSetTreeDelegateInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  SetTreeDelegateInstructionDataArgs,
  SetTreeDelegateInstructionData
> {
  const s = context.serializer;
  return mapSerializer<
    SetTreeDelegateInstructionDataArgs,
    any,
    SetTreeDelegateInstructionData
  >(
    s.struct<SetTreeDelegateInstructionData>(
      [['discriminator', s.array(s.u8(), { size: 8 })]],
      { description: 'SetTreeDelegateInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [253, 118, 66, 37, 190, 49, 154, 102],
    })
  ) as Serializer<
    SetTreeDelegateInstructionDataArgs,
    SetTreeDelegateInstructionData
  >;
}

// Instruction.
export function setTreeDelegate(
  context: Pick<Context, 'serializer' | 'programs' | 'eddsa' | 'identity'>,
  input: SetTreeDelegateInstructionAccounts
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplBubblegum',
    'BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY'
  );

  // Resolved inputs.
  const resolvedAccounts = {
    newTreeDelegate: [input.newTreeDelegate, false] as const,
    merkleTree: [input.merkleTree, false] as const,
  };
  addObjectProperty(
    resolvedAccounts,
    'treeAuthority',
    input.treeAuthority
      ? ([input.treeAuthority, true] as const)
      : ([
          findTreeConfigPda(context, {
            merkleTree: publicKey(input.merkleTree, false),
          }),
          true,
        ] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'treeCreator',
    input.treeCreator
      ? ([input.treeCreator, false] as const)
      : ([context.identity, false] as const)
  );
  addObjectProperty(
    resolvedAccounts,
    'systemProgram',
    input.systemProgram
      ? ([input.systemProgram, false] as const)
      : ([
          context.programs.getPublicKey(
            'splSystem',
            '11111111111111111111111111111111'
          ),
          false,
        ] as const)
  );

  addAccountMeta(keys, signers, resolvedAccounts.treeAuthority, false);
  addAccountMeta(keys, signers, resolvedAccounts.treeCreator, false);
  addAccountMeta(keys, signers, resolvedAccounts.newTreeDelegate, false);
  addAccountMeta(keys, signers, resolvedAccounts.merkleTree, false);
  addAccountMeta(keys, signers, resolvedAccounts.systemProgram, false);

  // Data.
  const data = getSetTreeDelegateInstructionDataSerializer(context).serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
