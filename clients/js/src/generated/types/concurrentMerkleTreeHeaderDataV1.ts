/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Context, PublicKey, Serializer } from '@metaplex-foundation/umi';

export type ConcurrentMerkleTreeHeaderDataV1 = {
  /**
   * Buffer of changelogs stored on-chain.
   * Must be a power of 2; see above table for valid combinations.
   */
  maxBufferSize: number;
  /**
   * Depth of the SPL ConcurrentMerkleTree to store.
   * Tree capacity can be calculated as power(2, max_depth).
   * See above table for valid options.
   */
  maxDepth: number;
  /**
   * Authority that validates the content of the trees.
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */
  authority: PublicKey;
  /**
   * Slot corresponding to when the Merkle tree was created.
   * Provides a lower-bound on what slot to start (re-)building a tree from.
   */
  creationSlot: bigint;
  /**
   * Needs padding for the account to be 8-byte aligned
   * 8-byte alignment is necessary to zero-copy the SPL ConcurrentMerkleTree
   */
  padding: Array<number>;
};

export type ConcurrentMerkleTreeHeaderDataV1Args = {
  /**
   * Buffer of changelogs stored on-chain.
   * Must be a power of 2; see above table for valid combinations.
   */
  maxBufferSize: number;
  /**
   * Depth of the SPL ConcurrentMerkleTree to store.
   * Tree capacity can be calculated as power(2, max_depth).
   * See above table for valid options.
   */
  maxDepth: number;
  /**
   * Authority that validates the content of the trees.
   * Typically a program, e.g., the Bubblegum contract validates that leaves are valid NFTs.
   */
  authority: PublicKey;
  /**
   * Slot corresponding to when the Merkle tree was created.
   * Provides a lower-bound on what slot to start (re-)building a tree from.
   */
  creationSlot: number | bigint;
  /**
   * Needs padding for the account to be 8-byte aligned
   * 8-byte alignment is necessary to zero-copy the SPL ConcurrentMerkleTree
   */
  padding: Array<number>;
};

export function getConcurrentMerkleTreeHeaderDataV1Serializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  ConcurrentMerkleTreeHeaderDataV1Args,
  ConcurrentMerkleTreeHeaderDataV1
> {
  const s = context.serializer;
  return s.struct<ConcurrentMerkleTreeHeaderDataV1>(
    [
      ['maxBufferSize', s.u32()],
      ['maxDepth', s.u32()],
      ['authority', s.publicKey()],
      ['creationSlot', s.u64()],
      ['padding', s.array(s.u8(), { size: 6 })],
    ],
    { description: 'ConcurrentMerkleTreeHeaderDataV1' }
  ) as Serializer<
    ConcurrentMerkleTreeHeaderDataV1Args,
    ConcurrentMerkleTreeHeaderDataV1
  >;
}
