/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Context, Option, Serializer } from '@metaplex-foundation/umi';
import {
  Collection,
  CollectionArgs,
  Creator,
  CreatorArgs,
  TokenProgramVersion,
  TokenProgramVersionArgs,
  TokenStandard,
  TokenStandardArgs,
  Uses,
  UsesArgs,
  getCollectionSerializer,
  getCreatorSerializer,
  getTokenProgramVersionSerializer,
  getTokenStandardSerializer,
  getUsesSerializer,
} from '.';

export type MetadataArgs = {
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: number;
  primarySaleHappened: boolean;
  isMutable: boolean;
  editionNonce: Option<number>;
  tokenStandard: Option<TokenStandard>;
  collection: Option<Collection>;
  uses: Option<Uses>;
  tokenProgramVersion: TokenProgramVersion;
  creators: Array<Creator>;
};

export type MetadataArgsArgs = {
  name: string;
  symbol: string;
  uri: string;
  sellerFeeBasisPoints: number;
  primarySaleHappened: boolean;
  isMutable: boolean;
  editionNonce: Option<number>;
  tokenStandard: Option<TokenStandardArgs>;
  collection: Option<CollectionArgs>;
  uses: Option<UsesArgs>;
  tokenProgramVersion: TokenProgramVersionArgs;
  creators: Array<CreatorArgs>;
};

export function getMetadataArgsSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MetadataArgsArgs, MetadataArgs> {
  const s = context.serializer;
  return s.struct<MetadataArgs>(
    [
      ['name', s.string()],
      ['symbol', s.string()],
      ['uri', s.string()],
      ['sellerFeeBasisPoints', s.u16()],
      ['primarySaleHappened', s.bool()],
      ['isMutable', s.bool()],
      ['editionNonce', s.option(s.u8())],
      ['tokenStandard', s.option(getTokenStandardSerializer(context))],
      ['collection', s.option(getCollectionSerializer(context))],
      ['uses', s.option(getUsesSerializer(context))],
      ['tokenProgramVersion', getTokenProgramVersionSerializer(context)],
      ['creators', s.array(getCreatorSerializer(context))],
    ],
    { description: 'MetadataArgs' }
  ) as Serializer<MetadataArgsArgs, MetadataArgs>;
}
