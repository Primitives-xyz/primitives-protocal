/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Option,
  Serializer,
  mapSerializer,
  none,
  some,
} from '@metaplex-foundation/umi';
import {
  Collection,
  CollectionArgs,
  Creator,
  CreatorArgs,
  TokenProgramVersion,
  TokenProgramVersionArgs,
  TokenStandard,
  TokenStandardArgs,
  Uses,
  UsesArgs,
  getCollectionSerializer,
  getCreatorSerializer,
  getTokenProgramVersionSerializer,
  getTokenStandardSerializer,
  getUsesSerializer,
} from '.';

export type MetadataArgs = {
  /** The name of the asset */
  name: string;
  /** The symbol for the asset */
  symbol: string;
  /** URI pointing to JSON representing the asset */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  primarySaleHappened: boolean;
  isMutable: boolean;
  /** nonce for easy calculation of editions, if present */
  editionNonce: Option<number>;
  /** Since we cannot easily change Metadata, we add the new DataV2 fields here at the end. */
  tokenStandard: Option<TokenStandard>;
  /** Collection */
  collection: Option<Collection>;
  /** Uses */
  uses: Option<Uses>;
  tokenProgramVersion: TokenProgramVersion;
  creators: Array<Creator>;
};

export type MetadataArgsArgs = {
  /** The name of the asset */
  name: string;
  /** The symbol for the asset */
  symbol?: string;
  /** URI pointing to JSON representing the asset */
  uri: string;
  /** Royalty basis points that goes to creators in secondary sales (0-10000) */
  sellerFeeBasisPoints: number;
  primarySaleHappened?: boolean;
  isMutable?: boolean;
  /** nonce for easy calculation of editions, if present */
  editionNonce?: Option<number>;
  /** Since we cannot easily change Metadata, we add the new DataV2 fields here at the end. */
  tokenStandard?: Option<TokenStandardArgs>;
  /** Collection */
  collection: Option<CollectionArgs>;
  /** Uses */
  uses?: Option<UsesArgs>;
  tokenProgramVersion?: TokenProgramVersionArgs;
  creators: Array<CreatorArgs>;
};

export function getMetadataArgsSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MetadataArgsArgs, MetadataArgs> {
  const s = context.serializer;
  return mapSerializer<MetadataArgsArgs, any, MetadataArgs>(
    s.struct<MetadataArgs>(
      [
        ['name', s.string()],
        ['symbol', s.string()],
        ['uri', s.string()],
        ['sellerFeeBasisPoints', s.u16()],
        ['primarySaleHappened', s.bool()],
        ['isMutable', s.bool()],
        ['editionNonce', s.option(s.u8())],
        ['tokenStandard', s.option(getTokenStandardSerializer(context))],
        ['collection', s.option(getCollectionSerializer(context))],
        ['uses', s.option(getUsesSerializer(context))],
        ['tokenProgramVersion', getTokenProgramVersionSerializer(context)],
        ['creators', s.array(getCreatorSerializer(context))],
      ],
      { description: 'MetadataArgs' }
    ),
    (value) => ({
      ...value,
      symbol: value.symbol ?? '',
      primarySaleHappened: value.primarySaleHappened ?? false,
      isMutable: value.isMutable ?? true,
      editionNonce: value.editionNonce ?? none(),
      tokenStandard: value.tokenStandard ?? some(TokenStandard.NonFungible),
      uses: value.uses ?? none(),
      tokenProgramVersion:
        value.tokenProgramVersion ?? some(TokenProgramVersion.Original),
    })
  ) as Serializer<MetadataArgsArgs, MetadataArgs>;
}
