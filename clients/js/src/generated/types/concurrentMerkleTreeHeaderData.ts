/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from '@metaplex-foundation/umi';
import {
  ConcurrentMerkleTreeHeaderDataV1,
  ConcurrentMerkleTreeHeaderDataV1Args,
  getConcurrentMerkleTreeHeaderDataV1Serializer,
} from '.';

export type ConcurrentMerkleTreeHeaderData = {
  __kind: 'V1';
  fields: [ConcurrentMerkleTreeHeaderDataV1];
};

export type ConcurrentMerkleTreeHeaderDataArgs = {
  __kind: 'V1';
  fields: [ConcurrentMerkleTreeHeaderDataV1Args];
};

export function getConcurrentMerkleTreeHeaderDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<
  ConcurrentMerkleTreeHeaderDataArgs,
  ConcurrentMerkleTreeHeaderData
> {
  const s = context.serializer;
  return s.dataEnum<ConcurrentMerkleTreeHeaderData>(
    [
      [
        'V1',
        s.struct<GetDataEnumKindContent<ConcurrentMerkleTreeHeaderData, 'V1'>>([
          [
            'fields',
            s.tuple([getConcurrentMerkleTreeHeaderDataV1Serializer(context)]),
          ],
        ]),
      ],
    ],
    { description: 'ConcurrentMerkleTreeHeaderData' }
  ) as Serializer<
    ConcurrentMerkleTreeHeaderDataArgs,
    ConcurrentMerkleTreeHeaderData
  >;
}

// Data Enum Helpers.
export function concurrentMerkleTreeHeaderData(
  kind: 'V1',
  data: GetDataEnumKindContent<
    ConcurrentMerkleTreeHeaderDataArgs,
    'V1'
  >['fields']
): GetDataEnumKind<ConcurrentMerkleTreeHeaderDataArgs, 'V1'>;
export function concurrentMerkleTreeHeaderData<
  K extends ConcurrentMerkleTreeHeaderDataArgs['__kind']
>(
  kind: K,
  data?: any
): Extract<ConcurrentMerkleTreeHeaderDataArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isConcurrentMerkleTreeHeaderData<
  K extends ConcurrentMerkleTreeHeaderData['__kind']
>(
  kind: K,
  value: ConcurrentMerkleTreeHeaderData
): value is ConcurrentMerkleTreeHeaderData & { __kind: K } {
  return value.__kind === kind;
}
