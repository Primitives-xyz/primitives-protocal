/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
} from '@metaplex-foundation/umi';
import {
  ApplicationDataEvent,
  ApplicationDataEventArgs,
  ChangeLogEvent,
  ChangeLogEventArgs,
  getApplicationDataEventSerializer,
  getChangeLogEventSerializer,
} from '.';

export type AccountCompressionEvent =
  | { __kind: 'ChangeLog'; fields: [ChangeLogEvent] }
  | { __kind: 'ApplicationData'; fields: [ApplicationDataEvent] };

export type AccountCompressionEventArgs =
  | { __kind: 'ChangeLog'; fields: [ChangeLogEventArgs] }
  | { __kind: 'ApplicationData'; fields: [ApplicationDataEventArgs] };

export function getAccountCompressionEventSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<AccountCompressionEventArgs, AccountCompressionEvent> {
  const s = context.serializer;
  return s.dataEnum<AccountCompressionEvent>(
    [
      [
        'ChangeLog',
        s.struct<GetDataEnumKindContent<AccountCompressionEvent, 'ChangeLog'>>([
          ['fields', s.tuple([getChangeLogEventSerializer(context)])],
        ]),
      ],
      [
        'ApplicationData',
        s.struct<
          GetDataEnumKindContent<AccountCompressionEvent, 'ApplicationData'>
        >([['fields', s.tuple([getApplicationDataEventSerializer(context)])]]),
      ],
    ],
    { description: 'AccountCompressionEvent' }
  ) as Serializer<AccountCompressionEventArgs, AccountCompressionEvent>;
}

// Data Enum Helpers.
export function accountCompressionEvent(
  kind: 'ChangeLog',
  data: GetDataEnumKindContent<
    AccountCompressionEventArgs,
    'ChangeLog'
  >['fields']
): GetDataEnumKind<AccountCompressionEventArgs, 'ChangeLog'>;
export function accountCompressionEvent(
  kind: 'ApplicationData',
  data: GetDataEnumKindContent<
    AccountCompressionEventArgs,
    'ApplicationData'
  >['fields']
): GetDataEnumKind<AccountCompressionEventArgs, 'ApplicationData'>;
export function accountCompressionEvent<
  K extends AccountCompressionEventArgs['__kind']
>(kind: K, data?: any): Extract<AccountCompressionEventArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isAccountCompressionEvent<
  K extends AccountCompressionEvent['__kind']
>(
  kind: K,
  value: AccountCompressionEvent
): value is AccountCompressionEvent & { __kind: K } {
  return value.__kind === kind;
}
